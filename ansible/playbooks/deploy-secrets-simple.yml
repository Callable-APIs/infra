---
- name: Deploy secrets to hosts
  hosts: all
  become: yes

  pre_tasks:
    - name: Check if standardization facts exist
      stat:
        path: /etc/callableapis/facts/standardization_complete
      register: standardization_fact

    - name: Read standardization status
      slurp:
        src: /etc/callableapis/facts/standardization_complete
      register: standardization_status
      when: standardization_fact.stat.exists

    - name: Check if host has been standardized
      fail:
        msg: |
          Host {{ inventory_hostname }} has not been standardized!

          Run the appropriate standardization playbook first:
          - Oracle Cloud: ansible-playbook -i inventory/production playbooks/install-containerd-direct.yml --limit oracle_cloud
          - Google Cloud: ansible-playbook -i inventory/production playbooks/install-containerd-direct.yml --limit google_cloud
          - IBM Cloud: ansible-playbook -i inventory/production playbooks/install-containerd-direct.yml --limit ibm_cloud
          - All hosts: ansible-playbook -i inventory/production playbooks/install-containerd-direct.yml

          Or validate existing facts:
          ansible-playbook -i inventory/production playbooks/validate-facts.yml
      when: not standardization_fact.stat.exists or not (standardization_status.content is defined and standardization_status.content | b64decode | trim == 'true')
  vars:
    secrets_dir: "/etc/vault-secrets"
    artifacts_dir: "/workspace/ansible/artifacts"

  tasks:
    - name: Create secrets directory
      file:
        path: "{{ secrets_dir }}"
        state: directory
        mode: "0700"
        owner: root
        group: root

    - name: Check if artifacts exist
      stat:
        path: "{{ artifacts_dir }}/vault-password"
      register: vault_password_file
      delegate_to: localhost

    - name: Check if vault password exists
      stat:
        path: "{{ artifacts_dir }}/secrets.yml"
      register: secrets_file
      delegate_to: localhost

    - name: Fail if artifacts missing
      fail:
        msg: "Secrets artifacts not found. Run ansible/scripts/build-secrets.sh first."
      when: not vault_password_file.stat.exists or not secrets_file.stat.exists

    - name: Copy vault password file
      copy:
        src: "{{ artifacts_dir }}/vault-password"
        dest: "{{ secrets_dir }}/vault-password"
        mode: "0600"
        owner: root
        group: root
        remote_src: no

    - name: Copy encrypted secrets file
      copy:
        src: "{{ artifacts_dir }}/secrets.yml"
        dest: "{{ secrets_dir }}/secrets.yml"
        mode: "0600"
        owner: root
        group: root
        remote_src: no
        decrypt: no

    - name: Copy checksum files
      copy:
        src: "{{ artifacts_dir }}/vault-password.sha256"
        dest: "{{ secrets_dir }}/vault-password.sha256"
        mode: "0644"
        owner: root
        group: root
        remote_src: no

    - name: Copy secrets checksum file
      copy:
        src: "{{ artifacts_dir }}/secrets.yml.sha256"
        dest: "{{ secrets_dir }}/secrets.yml.sha256"
        mode: "0644"
        owner: root
        group: root
        remote_src: no

    - name: Set checksum file permissions
      file:
        path: "{{ secrets_dir }}"
        mode: "0644"
        owner: root
        group: root
        recurse: yes

    - name: Verify vault password checksum
      command: sha256sum -c vault-password.sha256
      args:
        chdir: "{{ secrets_dir }}"
      register: vault_password_checksum
      failed_when: vault_password_checksum.rc != 0
      ignore_errors: true

    - name: Verify secrets file checksum
      command: sha256sum -c secrets.yml.sha256
      args:
        chdir: "{{ secrets_dir }}"
      register: secrets_checksum
      failed_when: secrets_checksum.rc != 0
      ignore_errors: true

    - name: Test vault decryption
      command: ansible-vault view secrets.yml --vault-password-file vault-password
      args:
        chdir: "{{ secrets_dir }}"
      register: vault_test
      failed_when: vault_test.rc != 0

    - name: Display deployment summary
      debug:
        msg: |
          Secrets deployed successfully to {{ secrets_dir }}

          Files deployed:
          - vault-password ({{ vault_password_checksum.stdout_lines[0] }})
          - secrets.yml ({{ secrets_checksum.stdout_lines[0] }})

          Vault test: {{ vault_test.rc == 0 and 'PASSED' or 'FAILED' }}

          Next steps:
          1. Deploy container with secrets mounted
          2. Test API endpoints
