---
- name: Check container runtime and deploy CallableAPIs Base Container
  hosts: all
  become: yes

  vars:
    container_image: "rl337/callableapis:base"
    container_name: "callableapis-base"
    container_port: 8080

  tasks:
    - name: Check available container runtimes
      command: which {{ item }}
      register: runtime_check
      failed_when: false
      loop:
        - docker
        - podman
        - nerdctl
        - ctr

    - name: Display available runtimes
      debug:
        msg: "Available runtimes: {{ runtime_check.results | selectattr('rc', 'equalto', 0) | map(attribute='item') | list }}"

    - name: Check if Docker is available
      stat:
        path: /usr/bin/docker
      register: docker_available

    - name: Check if Podman is available
      stat:
        path: /usr/bin/podman
      register: podman_available

    - name: Check if nerdctl is available
      stat:
        path: /usr/bin/nerdctl
      register: nerdctl_available

    - name: Check if ctr is available
      stat:
        path: /usr/bin/ctr
      register: ctr_available

    - name: Set container runtime
      set_fact:
        container_runtime: "{{ 'docker' if docker_available.stat.exists else ('podman' if podman_available.stat.exists else ('nerdctl' if nerdctl_available.stat.exists else ('ctr' if ctr_available.stat.exists else 'none'))) }}"
      when: docker_available.stat.exists or podman_available.stat.exists or nerdctl_available.stat.exists or ctr_available.stat.exists

    - name: Display selected runtime
      debug:
        msg: "Selected container runtime: {{ container_runtime }}"

    - name: Fail if no container runtime is available
      fail:
        msg: "No container runtime (docker, podman, nerdctl, ctr) is available on {{ inventory_hostname }}"
      when: container_runtime == 'none'

    - name: Start container runtime service (Docker)
      systemd:
        name: docker
        state: started
        enabled: yes
      when: container_runtime == 'docker'
      failed_when: false

    - name: Start container runtime service (Podman)
      systemd:
        name: podman
        state: started
        enabled: yes
      when: container_runtime == 'podman'
      failed_when: false

    - name: Start container runtime service (containerd)
      systemd:
        name: containerd
        state: started
        enabled: yes
      when: container_runtime == 'nerdctl' or container_runtime == 'ctr'
      failed_when: false

    - name: Wait for container runtime to be ready
      wait_for:
        port: "{{ 2376 if container_runtime == 'docker' else (2375 if container_runtime == 'podman' else 2375) }}"
        host: "127.0.0.1"
        timeout: 30
      failed_when: false

    - name: Pull base container image
      command: "{{ container_runtime }} pull {{ container_image }}"
      register: pull_result
      failed_when: false

    - name: Display pull result
      debug:
        msg: "{{ 'Container image pulled successfully' if pull_result.rc == 0 else 'Failed to pull container image' }}"

    - name: Stop existing base container if running
      command: "{{ container_runtime }} stop {{ container_name }}"
      register: stop_result
      failed_when: false

    - name: Remove existing base container if exists
      command: "{{ container_runtime }} rm {{ container_name }}"
      register: remove_result
      failed_when: false

    - name: Run base container
      command: >
        {{ container_runtime }} run -d
        --name {{ container_name }}
        --restart unless-stopped
        -p {{ container_port }}:8080
        {{ container_image }}
      register: run_result

    - name: Wait for container to start
      wait_for:
        port: "{{ container_port }}"
        host: "127.0.0.1"
        timeout: 30

    - name: Check container status
      command: "{{ container_runtime }} ps --filter name={{ container_name }}"
      register: container_status

    - name: Display container status
      debug:
        msg: "{{ container_status.stdout_lines }}"

    - name: Test container health endpoint
      uri:
        url: "http://127.0.0.1:{{ container_port }}/health"
        method: GET
        status_code: 200
      register: health_test
      failed_when: false

    - name: Test container status endpoint
      uri:
        url: "http://127.0.0.1:{{ container_port }}/api/status"
        method: GET
        status_code: 200
      register: status_test
      failed_when: false

    - name: Display test results
      debug:
        msg: |
          Container deployment completed on {{ inventory_hostname }}
          Runtime: {{ container_runtime }}
          Health endpoint: {{ 'PASSED' if health_test.status == 200 else 'FAILED' }}
          Status endpoint: {{ 'PASSED' if status_test.status == 200 else 'FAILED' }}
          Container port: {{ container_port }}
          Access URL: http://{{ ansible_default_ipv4.address }}:{{ container_port }}

  post_tasks:
    - name: Verify container is running
      command: "{{ container_runtime }} ps --filter name={{ container_name }} --format 'table {{.Names}}\t{{.Status}}\t{{.Ports}}'"
      register: final_status

    - name: Display final container status
      debug:
        msg: "{{ final_status.stdout_lines }}"
