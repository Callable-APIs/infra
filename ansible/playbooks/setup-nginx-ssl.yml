---
- name: Setup Nginx with SSL for Oracle Nodes
  hosts: onode1,onode2
  become: yes
  vars:
    ssl_cert_dir: "/etc/ssl/callableapis"
    nginx_ssl_dir: "/etc/nginx/ssl"

  tasks:
    - name: Install nginx
      ansible.builtin.apt:
        name: nginx
        state: present
        update_cache: yes

    - name: Create nginx SSL directory
      ansible.builtin.file:
        path: "{{ nginx_ssl_dir }}"
        state: directory
        mode: "0755"

    - name: Create symlinks for SSL certificates
      ansible.builtin.file:
        src: "{{ ssl_cert_dir }}/{{ item.src }}"
        dest: "{{ nginx_ssl_dir }}/{{ item.dest }}"
        state: link
        force: yes
      loop:
        - { src: "privkey.pem", dest: "privkey.pem" }
        - { src: "cert.pem", dest: "cert.pem" }
        - { src: "fullchain.pem", dest: "fullchain.pem" }

    - name: Create nginx configuration with SSL
      ansible.builtin.copy:
        content: |
          user www-data;
          worker_processes auto;
          pid /run/nginx.pid;
          include /etc/nginx/modules-enabled/*.conf;

          events {
              worker_connections 1024;
              use epoll;
              multi_accept on;
          }

          http {
              sendfile on;
              tcp_nopush on;
              tcp_nodelay on;
              keepalive_timeout 65;
              types_hash_max_size 2048;
              server_tokens off;

              include /etc/nginx/mime.types;
              default_type application/octet-stream;

              # SSL Settings
              ssl_protocols TLSv1.2 TLSv1.3;
              ssl_prefer_server_ciphers on;
              ssl_ciphers ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384;

              # Logging
              log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                              '$status $body_bytes_sent "$http_referer" '
                              '"$http_user_agent" "$http_x_forwarded_for"';

              access_log /var/log/nginx/access.log main;
              error_log /var/log/nginx/error.log;

              # Gzip
              gzip on;
              gzip_vary on;
              gzip_proxied any;
              gzip_comp_level 6;
              gzip_types text/plain text/css text/xml text/javascript application/json application/javascript application/xml+rss application/atom+xml image/svg+xml;

              # Rate limiting
              limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
              limit_req_zone $binary_remote_addr zone=health:10m rate=30r/s;

              # Upstream for containers
              upstream container_services {
                  least_conn;
                  server 127.0.0.1:8080 max_fails=3 fail_timeout=30s;
                  server 127.0.0.1:8081 max_fails=3 fail_timeout=30s;
                  server 127.0.0.1:8082 max_fails=3 fail_timeout=30s;
              }

              # HTTP server (redirect to HTTPS)
              server {
                  listen 80;
                  server_name {{ ansible_fqdn | default(inventory_hostname) }};
                  return 301 https://$server_name$request_uri;
              }

              # HTTPS server
              server {
                  listen 443 ssl http2;
                  server_name {{ ansible_fqdn | default(inventory_hostname) }};

                  # SSL configuration
                  ssl_certificate {{ nginx_ssl_dir }}/cert.pem;
                  ssl_certificate_key {{ nginx_ssl_dir }}/privkey.pem;
                  ssl_trusted_certificate {{ nginx_ssl_dir }}/fullchain.pem;

                  # Security headers
                  add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
                  add_header X-Frame-Options "SAMEORIGIN" always;
                  add_header X-Content-Type-Options "nosniff" always;
                  add_header X-XSS-Protection "1; mode=block" always;
                  add_header Referrer-Policy "strict-origin-when-cross-origin" always;

                  # Health check endpoints
                  location /health {
                      limit_req zone=health burst=20 nodelay;
                      proxy_pass http://container_services;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_connect_timeout 5s;
                      proxy_send_timeout 10s;
                      proxy_read_timeout 10s;
                  }

                  # Status endpoint
                  location /api/status {
                      limit_req zone=health burst=20 nodelay;
                      proxy_pass http://container_services;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_connect_timeout 5s;
                      proxy_send_timeout 10s;
                      proxy_read_timeout 10s;
                  }

                  # API health endpoint
                  location /api/health {
                      limit_req zone=health burst=20 nodelay;
                      proxy_pass http://container_services;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_connect_timeout 5s;
                      proxy_send_timeout 10s;
                      proxy_read_timeout 10s;
                  }

                  # Versioned API endpoints
                  location /api/v1/ {
                      limit_req zone=api burst=50 nodelay;
                      proxy_pass http://container_services;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_connect_timeout 5s;
                      proxy_send_timeout 30s;
                      proxy_read_timeout 30s;
                  }

                  location /api/v2/ {
                      limit_req zone=api burst=50 nodelay;
                      proxy_pass http://container_services;
                      proxy_set_header Host $host;
                      proxy_set_header X-Real-IP $remote_addr;
                      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                      proxy_set_header X-Forwarded-Proto $scheme;
                      proxy_connect_timeout 5s;
                      proxy_send_timeout 30s;
                      proxy_read_timeout 30s;
                  }

                  # Root endpoint
                  location / {
                      return 200 '{"node": "{{ inventory_hostname }}", "service": "CallableAPIs Infrastructure", "ssl": "enabled", "endpoints": ["/health", "/api/status", "/api/health", "/api/v1/*", "/api/v2/*"], "timestamp": "$time_iso8601"}';
                      add_header Content-Type application/json;
                  }

                  # Error pages
                  error_page 404 /404.json;
                  location = /404.json {
                      return 404 '{"error": "Not Found", "message": "The requested resource was not found", "status": 404}';
                      add_header Content-Type application/json;
                  }

                  error_page 500 502 503 504 /50x.json;
                  location = /50x.json {
                      return 500 '{"error": "Service Unavailable", "message": "The service is temporarily unavailable", "status": 500}';
                      add_header Content-Type application/json;
                  }
              }
          }
        dest: /etc/nginx/nginx.conf
        mode: "0644"
      notify: restart nginx

    - name: Remove default nginx site
      ansible.builtin.file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify: restart nginx

    - name: Start and enable nginx
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Test nginx configuration
      ansible.builtin.command: nginx -t
      register: nginx_test
      changed_when: false

    - name: Wait for nginx to start
      ansible.builtin.wait_for:
        port: 443
        host: localhost
        timeout: 30

    - name: Test HTTPS health endpoint
      ansible.builtin.uri:
        url: "https://localhost/health"
        method: GET
        validate_certs: no
        status_code: 200
      register: https_test
      failed_when: false

    - name: Display nginx SSL setup results
      ansible.builtin.debug:
        msg: |
          Nginx SSL Setup Results for {{ inventory_hostname }}:
          - SSL Directory: {{ nginx_ssl_dir }}
          - Configuration: /etc/nginx/nginx.conf
          - HTTPS Port: 443
          - HTTP Redirect: 80 -> 443
          - SSL Test: {{ 'PASSED' if https_test.status == 200 else 'FAILED' }}
          - Status: {{ 'SUCCESS' if nginx_test.rc == 0 else 'FAILED' }}

  handlers:
    - name: restart nginx
      ansible.builtin.systemd:
        name: nginx
        state: restarted
