---
- name: Install containerd using apt package manager
  hosts: all
  become: yes
  vars:
    containerd_version: "1.7.24"

  tasks:
    - name: Add ansible user to sudoers
      lineinfile:
        path: /etc/sudoers.d/ansible
        line: "ansible ALL=(ALL) NOPASSWD:ALL"
        create: yes
        mode: "0440"

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - git
          - python3
          - python3-pip
          - python3-venv
          - htop
          - iotop
          - net-tools
          - vim
          - nano
          - unzip
          - jq
          - fail2ban
          - ufw
        state: present

    - name: Install Python 3.12 from deadsnakes PPA (Ubuntu 24.04+)
      apt:
        name: python3.12
        state: present
      when: ansible_distribution_version is version('24.04', '>=')

    - name: Install Python 3.10 for Ubuntu 22.04
      apt:
        name: python3.10
        state: present
      when: ansible_distribution_version is version('22.04', '>=') and ansible_distribution_version is version('24.04', '<')

    - name: Set Python 3.12 as default python3 (Ubuntu 24.04+)
      alternatives:
        name: python3
        path: /usr/bin/python3.12
        link: /usr/bin/python3
      when: ansible_distribution_version is version('24.04', '>=')

    - name: Set Python 3.10 as default python3 (Ubuntu 22.04)
      alternatives:
        name: python3
        path: /usr/bin/python3.10
        link: /usr/bin/python3
      when: ansible_distribution_version is version('22.04', '>=') and ansible_distribution_version is version('24.04', '<')

    - name: Remove broken containerd packages
      apt:
        name:
          - containerd
          - containerd.io
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Install containerd from Ubuntu repositories
      apt:
        name: containerd
        state: present

    - name: Install runc from Ubuntu repositories
      apt:
        name: runc
        state: present

    - name: Create containerd systemd service file
      copy:
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target

          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/bin/containerd
          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5
          LimitNPROC=infinity
          LimitCORE=infinity
          LimitNOFILE=infinity
          TasksMax=infinity
          OOMScoreAdjust=-999

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/containerd.service
        mode: "0644"

    - name: Create CNI plugins directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: "0755"

    - name: Install CNI plugins from Ubuntu repositories
      apt:
        name: containernetworking-plugins
        state: present

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Create basic containerd configuration
      copy:
        content: |
          version = 2
          root = "/var/lib/containerd"
          state = "/run/containerd"

          [grpc]
            address = "/run/containerd/containerd.sock"
            uid = 0
            gid = 0
            max_recv_message_size = 16777216
            max_send_message_size = 16777216

          [ttrpc]
            address = "/run/containerd/containerd.sock.ttrpc"
            uid = 0
            gid = 0

          [debug]
            address = ""
            uid = 0
            gid = 0
            level = ""

          [metrics]
            address = ""
            grpc_histogram = false

          [cgroup]
            path = ""

          [timeouts]
            "io.containerd.timeout.shim.cleanup" = "5s"
            "io.containerd.timeout.shim.load" = "5s"
            "io.containerd.timeout.shim.shutdown" = "3s"
            "io.containerd.timeout.task.state" = "2s"

          [plugins]
            [plugins."io.containerd.gc.v1.scheduler"]
              pause_threshold = 0.02
              deletion_threshold = 0
              mutation_threshold = 100
              schedule_delay = "0s"
              startup_delay = "100ms"

            [plugins."io.containerd.grpc.v1.cri"]
              disable_tcp_service = true
              stream_server_address = "127.0.0.1"
              stream_server_port = "0"
              stream_idle_timeout = "4h0m0s"
              enable_selinux = false
              selinux_category_range = 1024
              sandbox_image = "registry.k8s.io/pause:3.9"
              stats_collect_period = 10
              systemd_cgroup = false
              enable_tls_streaming = false
              max_container_log_line_size = 16384
              disable_cgroup = false
              disable_apparmor = false
              restrict_oom_score_adj = false
              max_concurrent_downloads = 3
              disable_proc_mount = false
              unset_seccomp_profile = ""
              tolerate_missing_hugetlb_controller = true
              ignore_image_defined_volumes = false
              [plugins."io.containerd.grpc.v1.cri".containerd]
                snapshotter = "overlayfs"
                default_runtime_name = "runc"
                no_pivot = false
                disable_snapshot_annotations = true
                discard_unpacked_layers = false
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                  [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                    runtime_type = "io.containerd.runc.v2"
                    runtime_engine = ""
                    runtime_root = ""
                    privileged_without_host_devices = false
                    base_runtime_spec = ""
                    [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
                      SystemdCgroup = true
        dest: /etc/containerd/config.toml
        mode: "0644"

    - name: Enable and start containerd service
      systemd:
        name: containerd
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Note that nerdctl is not available in Ubuntu repositories
      debug:
        msg: "Using ctr (containerd CLI) instead of nerdctl"

    - name: Create containerd group
      group:
        name: containerd
        state: present

    - name: Add ansible user to containerd group
      user:
        name: ansible
        groups: containerd
        append: yes

    - name: Verify containerd installation
      command: containerd --version
      register: containerd_version_output
      changed_when: false

    - name: Verify Python version
      command: python3 --version
      register: python_version_output
      changed_when: false

    - name: Check containerd service status
      systemd:
        name: containerd
      register: containerd_status
      changed_when: false

    - name: Create facts directory
      file:
        path: /home/ansible/.ansible/facts
        state: directory
        owner: ansible
        group: ansible
        mode: "0755"

    - name: Write standardization facts to files
      copy:
        content: "{{ item.value }}"
        dest: "/home/ansible/.ansible/facts/{{ item.key }}"
        owner: ansible
        group: ansible
        mode: "0644"
      loop:
        - { key: "python_version", value: "{{ python_version_output.stdout }}" }
        - {
            key: "containerd_version",
            value: "{{ containerd_version_output.stdout }}",
          }
        - {
            key: "containerd_status",
            value: "{{ 'active' if containerd_status.status.ActiveState == 'active' else 'inactive' }}",
          }
        - { key: "standardization_complete", value: "true" }
        - { key: "cloud_provider", value: "unknown" }
        - {
            key: "os_version",
            value: "{{ ansible_distribution }} {{ ansible_distribution_version }}",
          }
        - {
            key: "standardization_date",
            value: "{{ ansible_date_time.iso8601 }}",
          }

    - name: Set standardization facts (for current run)
      set_fact:
        python_version: "{{ python_version_output.stdout }}"
        containerd_version: "{{ containerd_version_output.stdout }}"
        containerd_status: "{{ 'active' if containerd_status.status.ActiveState == 'active' else 'inactive' }}"
        standardization_complete: true
        cloud_provider: "unknown"
        os_version: "{{ ansible_distribution }} {{ ansible_distribution_version }}"
        standardization_date: "{{ ansible_date_time.iso8601 }}"

    - name: Display standardization results
      debug:
        msg: |
          {{ cloud_provider | title }} Cloud Host Standardized:
          - Host: {{ inventory_hostname }}
          - OS: {{ os_version }}
          - Python: {{ python_version }}
          - Containerd: {{ containerd_version }}
          - Containerd Status: {{ containerd_status }}
          - Standardization: COMPLETE

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
