---
- name: Install containerd directly from GitHub releases
  hosts: all
  become: yes
  vars:
    containerd_version: "1.7.13"
    runc_version: "1.1.12"
    cni_version: "1.4.0"

  tasks:
    - name: Add ansible user to sudoers
      user:
        name: ansible
        groups: sudo
        append: yes

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600
        dpkg_options: "force-confdef,force-confold"
        lock_timeout: 60
      retries: 3
      delay: 10
      timeout: 300

    - name: Install essential packages
      apt:
        name:
          - curl
          - wget
          - gnupg
          - lsb-release
          - ca-certificates
          - apt-transport-https
          - software-properties-common
          - build-essential
        state: present
        dpkg_options: "force-confdef,force-confold"
        lock_timeout: 60
      timeout: 300

    - name: Install Python 3.12 from deadsnakes PPA (Ubuntu 24.04+)
      shell: |
        add-apt-repository ppa:deadsnakes/ppa -y
        apt-get update
        apt-get install -y python3.12 python3.12-venv python3.12-dev python3.12-pip
      args:
        creates: /usr/bin/python3.12
      timeout: 600
      when: ansible_distribution_version is version('24.04', '>=')

    - name: Install Python 3.10 for Ubuntu 22.04
      apt:
        name:
          - python3.10
          - python3.10-venv
          - python3.10-dev
          - python3-pip
        state: present
        dpkg_options: "force-confdef,force-confold"
        lock_timeout: 60
      timeout: 300
      when: ansible_distribution_version is version('22.04', '==')

    - name: Set Python 3.12 as default python3 (Ubuntu 24.04+)
      alternatives:
        name: python3
        path: /usr/bin/python3.12
        link: /usr/bin/python3
      when: ansible_distribution_version is version('24.04', '>=')

    - name: Set Python 3.10 as default python3 (Ubuntu 22.04)
      alternatives:
        name: python3
        path: /usr/bin/python3.10
        link: /usr/bin/python3
      when: ansible_distribution_version is version('22.04', '==')

    - name: Remove broken containerd packages
      apt:
        name:
          - containerd
          - containerd.io
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Download containerd binary
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v{{ containerd_version }}/containerd-{{ containerd_version }}-linux-amd64.tar.gz"
        dest: /tmp/containerd.tar.gz
        mode: "0644"
      timeout: 300

    - name: Extract containerd binary
      unarchive:
        src: /tmp/containerd.tar.gz
        dest: /usr/local
        remote_src: yes
        mode: "0755"
        owner: root
        group: root

    - name: Create containerd systemd service file
      copy:
        content: |
          [Unit]
          Description=containerd container runtime
          Documentation=https://containerd.io
          After=network.target local-fs.target

          [Service]
          ExecStartPre=-/sbin/modprobe overlay
          ExecStart=/usr/local/bin/containerd
          Type=notify
          Delegate=yes
          KillMode=process
          Restart=always
          RestartSec=5
          LimitNOFILE=1048576
          LimitNPROC=infinity
          LimitCORE=infinity
          TasksMax=infinity
          OOMScoreAdjust=-999

          [Install]
          WantedBy=multi-user.target
        dest: /etc/systemd/system/containerd.service
        mode: "0644"
      notify: restart containerd

    - name: Download runc binary
      get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v{{ runc_version }}/runc.amd64"
        dest: /usr/local/bin/runc
        mode: "0755"
      timeout: 300

    - name: Create CNI plugins directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Install CNI plugins
      unarchive:
        src: "https://github.com/containernetworking/plugins/releases/download/v{{ cni_version }}/cni-plugins-linux-amd64-v{{ cni_version }}.tgz"
        dest: /opt/cni/bin
        remote_src: yes
        mode: "0755"
        owner: root
        group: root
      timeout: 300

    - name: Create containerd configuration directory
      file:
        path: /etc/containerd
        state: directory
        mode: "0755"

    - name: Create basic containerd configuration
      copy:
        content: |
          version = 2
          [plugins."io.containerd.grpc.v1.cri"]
            [plugins."io.containerd.grpc.v1.cri".containerd]
              [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]
                [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
                  runtime_type = "io.containerd.runc.v2"
        dest: /etc/containerd/config.toml
        mode: "0644"
      notify: restart containerd

    - name: Enable and start containerd service
      systemd:
        name: containerd
        enabled: yes
        state: started
        daemon_reload: yes

    - name: Install nerdctl (containerd CLI)
      get_url:
        url: "https://github.com/containerd/nerdctl/releases/download/v1.7.1/nerdctl-1.7.1-linux-amd64.tar.gz"
        dest: /tmp/nerdctl.tar.gz
        mode: "0644"
      timeout: 300

    - name: Extract nerdctl
      unarchive:
        src: /tmp/nerdctl.tar.gz
        dest: /usr/local/bin
        remote_src: yes
        mode: "0755"
        owner: root
        group: root

    - name: Create containerd group
      group:
        name: containerd
        state: present

    - name: Add ansible user to containerd group
      user:
        name: ansible
        groups: containerd
        append: yes

    - name: Clean up temporary files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - /tmp/containerd.tar.gz
        - /tmp/nerdctl.tar.gz

    - name: Verify containerd installation
      command: containerd --version
      register: containerd_version_check
      changed_when: false

    - name: Verify Python version
      command: python3 --version
      register: python_version_check
      changed_when: false

    - name: Check containerd service status
      command: systemctl is-active containerd
      register: containerd_status
      changed_when: false

    - name: Create facts directory
      file:
        path: /etc/callableapis/facts
        state: directory
        mode: "0755"
        owner: root
        group: root

    - name: Write standardization facts to files
      copy:
        content: "{{ item.value }}"
        dest: "/etc/callableapis/facts/{{ item.key }}"
        mode: "0644"
        owner: root
        group: root
      loop:
        - { key: "python_version", value: "{{ python_version_check.stdout }}" }
        - {
            key: "containerd_version",
            value: "{{ containerd_version_check.stdout }}",
          }
        - { key: "containerd_status", value: "{{ containerd_status.stdout }}" }
        - { key: "standardization_complete", value: "true" }
        - {
            key: "cloud_provider",
            value: "{{ 'oracle' if 'oracle' in group_names else 'google' if 'google' in group_names else 'ibm' if 'ibm' in group_names else 'unknown' }}",
          }
        - {
            key: "os_version",
            value: "{{ ansible_distribution }} {{ ansible_distribution_version }}",
          }
        - {
            key: "standardization_date",
            value: "{{ ansible_date_time.iso8601 }}",
          }

    - name: Set standardization facts (for current run)
      set_fact:
        python_version: "{{ python_version_check.stdout }}"
        containerd_version: "{{ containerd_version_check.stdout }}"
        containerd_status: "{{ containerd_status.stdout }}"
        standardization_complete: true
        cloud_provider: "{{ 'oracle' if 'oracle' in group_names else 'google' if 'google' in group_names else 'ibm' if 'ibm' in group_names else 'unknown' }}"
        os_version: "{{ ansible_distribution }} {{ ansible_distribution_version }}"

    - name: Display standardization results
      debug:
        msg: |
          {{ cloud_provider|title }} Cloud Host Standardized:
          - Host: {{ inventory_hostname }}
          - OS: {{ os_version }}
          - Python: {{ python_version }}
          - Containerd: {{ containerd_version }}
          - Containerd Status: {{ containerd_status }}
          - Standardization: COMPLETE

  handlers:
    - name: restart containerd
      systemd:
        name: containerd
        state: restarted
        daemon_reload: yes
