---
- name: Migrate nodes from containerd to Docker
  hosts: all
  become: yes
  vars:
    container_name: "callableapis-base"
    container_image: "rl337/callableapis:base"
    container_port: 8080

  tasks:
    - name: Check current container runtime
      ansible.builtin.shell: |
        if command -v docker >/dev/null 2>&1; then
          echo "docker"
        elif command -v nerdctl >/dev/null 2>&1; then
          echo "nerdctl"
        elif command -v ctr >/dev/null 2>&1; then
          echo "ctr"
        else
          echo "none"
        fi
      register: current_runtime
      changed_when: false

    - name: Display current runtime
      ansible.builtin.debug:
        msg: "Current container runtime: {{ current_runtime.stdout }}"

    - name: Stop existing containerd containers (nerdctl)
      ansible.builtin.shell: |
        nerdctl stop {{ container_name }} || true
        nerdctl rm {{ container_name }} || true
      when: current_runtime.stdout == "nerdctl"
      ignore_errors: yes

    - name: Stop existing containerd containers (ctr)
      ansible.builtin.shell: |
        ctr tasks kill {{ container_name }} || true
        ctr containers delete {{ container_name }} || true
      when: current_runtime.stdout == "ctr"
      ignore_errors: yes

    - name: Stop existing Docker containers
      ansible.builtin.shell: |
        docker stop {{ container_name }} || true
        docker rm {{ container_name }} || true
      when: current_runtime.stdout == "docker"
      ignore_errors: yes

    - name: Install Docker (if not already installed)
      include_tasks: install_docker_tasks.yml
      when: current_runtime.stdout != "docker"

    - name: Deploy container with Docker
      include_tasks: deploy_docker_tasks.yml

  handlers:
    - name: restart docker
      ansible.builtin.systemd:
        name: docker
        state: restarted

- name: Install Docker tasks
  hosts: all
  become: yes
  tasks:
    - name: Remove old Docker packages
      ansible.builtin.apt:
        name:
          - docker
          - docker-engine
          - docker.io
          - containerd
          - containerd.io
        state: absent
        purge: yes
      ignore_errors: yes

    - name: Add Docker's official GPG key
      ansible.builtin.apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        update_cache: yes

    - name: Install Docker Engine
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Create docker group
      ansible.builtin.group:
        name: docker
        state: present

    - name: Add ansible user to docker group
      ansible.builtin.user:
        name: ansible
        groups: docker
        append: yes

    - name: Enable and start Docker service
      ansible.builtin.systemd:
        name: docker
        enabled: yes
        state: started
        daemon_reload: yes

- name: Deploy Docker container tasks
  hosts: all
  become: yes
  tasks:
    - name: Start Docker service
      ansible.builtin.systemd:
        name: docker
        state: started
        enabled: yes

    - name: Wait for Docker to be ready
      ansible.builtin.wait_for:
        port: 2376
        host: localhost
        timeout: 30
      ignore_errors: yes

    - name: Pull base container image
      ansible.builtin.docker_image:
        name: "{{ container_image }}"
        source: pull
        force_source: yes

    - name: Deploy base container
      ansible.builtin.docker_container:
        name: "{{ container_name }}"
        image: "{{ container_image }}"
        state: started
        restart_policy: "unless-stopped"
        ports:
          - "{{ container_port }}:{{ container_port }}"
        env:
          CONTAINER_VERSION: "{{ ansible_date_time.iso8601 }}"
        labels:
          app: "callableapis"
          service: "base"
          managed_by: "ansible"
          deployed_at: "{{ ansible_date_time.iso8601 }}"

    - name: Wait for container to start
      ansible.builtin.wait_for:
        port: "{{ container_port }}"
        host: localhost
        timeout: 30

    - name: Test container health endpoint
      ansible.builtin.uri:
        url: "http://localhost:{{ container_port }}/health"
        method: GET
        status_code: 200
      register: health_check_result
      failed_when: false

    - name: Display migration results
      ansible.builtin.debug:
        msg: |
          Migration to Docker completed on {{ inventory_hostname }}
          Container: {{ container_name }}
          Health endpoint: {{ 'PASSED' if health_check_result.status == 200 else 'FAILED' }}
          Container port: {{ container_port }}
          Access URL: http://localhost:{{ container_port }}
