---
- name: Smart Deploy Services Container
  hosts: services_container_hosts
  become: yes
  tasks:
    - name: Check if local services image exists
      ansible.builtin.command: docker images rl337/callableapis:services -q
      register: local_image_check
      changed_when: false
      failed_when: false

    - name: Get local container image creation time
      ansible.builtin.shell: |
        docker inspect rl337/callableapis:services 2>/dev/null | grep -o '"Created": "[^"]*"' | head -1
      register: local_image_created
      changed_when: false
      failed_when: false
      when: local_image_check.rc == 0

    - name: Fetch latest image info from Docker Hub
      ansible.builtin.uri:
        url: "https://hub.docker.com/v2/repositories/rl337/callableapis/tags/services"
        method: GET
        return_content: yes
        headers:
          Accept: "application/json"
      register: hub_image_info
      changed_when: false
      failed_when: false

    - name: Parse Docker Hub image info
      ansible.builtin.set_fact:
        hub_last_updated: "{{ hub_image_info.json.last_updated | default('') }}"
      when: hub_image_info.json is defined

    - name: Pull latest services container image
      ansible.builtin.command: docker pull rl337/callableapis:services
      register: pull_result
      failed_when: false
      changed_when: "'Downloaded newer image' in pull_result.stdout or 'Pulling from' in pull_result.stdout"

    - name: Get new container creation time
      ansible.builtin.shell: |
        docker inspect rl337/callableapis:services 2>/dev/null | grep -o '"Created": "[^"]*"' | head -1
      register: new_image_created
      when: pull_result.changed
      changed_when: false

    - name: Check if image actually changed
      ansible.builtin.set_fact:
        image_changed: "{{ new_image_created.stdout != local_image_created.stdout }}"
      when: pull_result.changed and local_image_check.rc == 0
      failed_when: false

    - name: Set default image_changed to true if no local image exists
      ansible.builtin.set_fact:
        image_changed: true
      when: local_image_check.rc != 0

    - name: Check if container is running
      ansible.builtin.shell: docker ps --filter name=callableapis-services -q
      register: container_check
      changed_when: false
      failed_when: false

    - name: Stop existing services container
      ansible.builtin.shell: |
        docker stop callableapis-services
        docker rm callableapis-services
      when: image_changed | default(false) and container_check.rc == 0
      failed_when: false

    - name: Deploy services container with vault mount
      ansible.builtin.shell: |
        docker run -d \
          --name callableapis-services \
          --restart unless-stopped \
          -p {{ services_port | default('8080') }}:8080 \
          -v /home/ansible/.ansible/vault:/app/vault:ro \
          rl337/callableapis:services
      register: container_deploy
      when: image_changed | default(false)
      failed_when: false

    - name: Wait for container to be ready
      ansible.builtin.wait_for:
        port: "{{ services_port | default('8080') }}"
        host: "127.0.0.1"
        timeout: 30
      when: image_changed | default(false) and container_deploy.rc == 0

    - name: Verify services container is running
      ansible.builtin.shell: docker ps --filter name=callableapis-services
      register: container_status
      when: image_changed | default(false)
      changed_when: false

    - name: Display deployment status
      ansible.builtin.debug:
        msg: |
          Services Container Status:
          - Local Image Exists: {{ local_image_check.rc == 0 }}
          - Docker Hub Updated: {{ hub_last_updated | default('Unknown') }}
          - Image Changed: {{ image_changed | default(false) }}
          - Container Deployed: {{ container_deploy.changed | default(false) if container_deploy is defined else False }}
