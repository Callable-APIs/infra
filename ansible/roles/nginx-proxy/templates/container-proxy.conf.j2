# CallableAPIs Container Proxy Configuration
# Exposes container endpoints via HTTP on port 80

# Main server block for container services
server {
    listen 80;
    server_name {{ ansible_fqdn | default(inventory_hostname) }};
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    
    # Health check endpoints (unversioned)
    location /health {
        limit_req zone=health burst=20 nodelay;
        proxy_pass http://container_services;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Status endpoint (unversioned)
    location /api/status {
        limit_req zone=health burst=20 nodelay;
        proxy_pass http://container_services;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # API health endpoint (unversioned)
    location /api/health {
        limit_req zone=health burst=20 nodelay;
        proxy_pass http://container_services;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 10s;
        proxy_read_timeout 10s;
    }
    
    # Versioned API endpoints
    location /api/v1/ {
        limit_req zone=api burst=50 nodelay;
        proxy_pass http://container_services;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    location /api/v2/ {
        limit_req zone=api burst=50 nodelay;
        proxy_pass http://container_services;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_connect_timeout 5s;
        proxy_send_timeout 30s;
        proxy_read_timeout 30s;
    }
    
    # Root endpoint - show node information
    location / {
        return 200 '{"node": "{{ inventory_hostname }}", "service": "CallableAPIs Infrastructure", "endpoints": ["/health", "/api/status", "/api/health", "/api/v1/*", "/api/v2/*"], "timestamp": "$time_iso8601"}';
        add_header Content-Type application/json;
    }
    
    # Error pages
    error_page 404 /404.json;
    location = /404.json {
        return 404 '{"error": "Not Found", "message": "The requested resource was not found", "status": 404}';
        add_header Content-Type application/json;
    }
    
    error_page 500 502 503 504 /50x.json;
    location = /50x.json {
        return 500 '{"error": "Service Unavailable", "message": "The service is temporarily unavailable", "status": 500}';
        add_header Content-Type application/json;
    }
}

# Health check server for load balancer monitoring
server {
    listen 8080;
    server_name {{ ansible_fqdn | default(inventory_hostname) }};
    
    location /health {
        access_log off;
        return 200 '{"status": "healthy", "node": "{{ inventory_hostname }}", "timestamp": "$time_iso8601"}';
        add_header Content-Type application/json;
    }
    
    location / {
        return 200 '{"node": "{{ inventory_hostname }}", "service": "nginx-proxy", "status": "running"}';
        add_header Content-Type application/json;
    }
}

