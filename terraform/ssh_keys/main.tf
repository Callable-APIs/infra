# SSH Key Management for Multi-Cloud Infrastructure
# Generates SSH key pairs for secure access across all cloud providers

terraform {
  required_version = ">= 1.5"
  required_providers {
    tls = {
      source  = "hashicorp/tls"
      version = "~> 4.0"
    }
    local = {
      source  = "hashicorp/local"
      version = "~> 2.0"
    }
  }
}

# Generate SSH key pair
resource "tls_private_key" "callableapis_ssh" {
  algorithm = "RSA"
  rsa_bits  = 4096
}

# Save private key to file
resource "local_file" "private_key" {
  content         = tls_private_key.callableapis_ssh.private_key_pem
  filename        = "${path.module}/keys/callableapis_private_key"
  file_permission = "0600"
}

# Save public key to file
resource "local_file" "public_key" {
  content         = tls_private_key.callableapis_ssh.public_key_openssh
  filename        = "${path.module}/keys/callableapis_public_key"
  file_permission = "0644"
}

# Create SSH config for easy access
resource "local_file" "ssh_config" {
  content = <<-EOF
# CallableAPIs Multi-Cloud SSH Configuration
# Generated by Terraform

# Oracle Cloud ARM Instance 1
Host oracle-arm-1
    HostName ${var.oracle_arm_1_ip}
    User ubuntu
    IdentityFile ${path.module}/keys/callableapis_private_key
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

# Oracle Cloud ARM Instance 2
Host oracle-arm-2
    HostName ${var.oracle_arm_2_ip}
    User ubuntu
    IdentityFile ${path.module}/keys/callableapis_private_key
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

# Google Cloud e2-micro
Host google-e2-micro
    HostName ${var.google_e2_micro_ip}
    User ubuntu
    IdentityFile ${path.module}/keys/callableapis_private_key
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

# IBM Cloud VSI
Host ibm-vsi
    HostName ${var.ibm_vsi_ip}
    User ubuntu
    IdentityFile ${path.module}/keys/callableapis_private_key
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null

# AWS Elastic Beanstalk (existing)
Host aws-eb
    HostName ${var.aws_eb_ip}
    User ec2-user
    IdentityFile ${path.module}/keys/callableapis_private_key
    StrictHostKeyChecking no
    UserKnownHostsFile /dev/null
EOF

  filename        = "${path.module}/ssh_config"
  file_permission = "0644"
}

# Create inventory file for Ansible/automation
resource "local_file" "inventory" {
  content = <<-EOF
# CallableAPIs Multi-Cloud Inventory
# Generated by Terraform

[oracle_cloud]
oracle-arm-1 ansible_host=${var.oracle_arm_1_ip} ansible_user=ubuntu provider=oracle role=primary
oracle-arm-2 ansible_host=${var.oracle_arm_2_ip} ansible_user=ubuntu provider=oracle role=secondary

[google_cloud]
google-e2-micro ansible_host=${var.google_e2_micro_ip} ansible_user=ubuntu provider=google role=monitoring

[ibm_cloud]
ibm-vsi ansible_host=${var.ibm_vsi_ip} ansible_user=ubuntu provider=ibm role=services

[aws_cloud]
aws-eb ansible_host=${var.aws_eb_ip} ansible_user=ec2-user provider=aws role=production

[all:vars]
ansible_ssh_private_key_file=${path.module}/keys/callableapis_private_key
ansible_ssh_common_args='-o StrictHostKeyChecking=no'
EOF

  filename        = "${path.module}/inventory"
  file_permission = "0644"
}

