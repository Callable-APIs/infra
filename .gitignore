# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
pip-wheel-metadata/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
*.manifest
*.spec

# Installer logs
pip-log.txt
pip-delete-this-directory.txt

# Unit test / coverage reports
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/

# Translations
*.mo
*.pot

# Django stuff:
*.log
local_settings.py
db.sqlite3
db.sqlite3-journal

# Flask stuff:
instance/
.webassets-cache

# Scrapy stuff:
.scrapy

# Sphinx documentation
docs/_build/

# PyBuilder
target/

# Jupyter Notebook
.ipynb_checkpoints

# IPython
profile_default/
ipython_config.py

# pyenv
.python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
__pypackages__/

# Celery stuff
celerybeat-schedule
celerybeat.pid

# SageMath parsed files
*.sage.py

# Environments
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# Spyder project settings
.spyderproject
.spyproject

# Rope project settings
.ropeproject

# mkdocs documentation
/site

# mypy
.mypy_cache/
.dmypy.json
dmypy.json

# Pyre type checker
.pyre/

# Project specific
config.yaml
env.sh
env-deployer.sh
env.example
reports/
demo_reports/
internal_reports/
test_reports/
*.html
bandit-report.json
*.zip

# Temporary build and deployment files
appspec.yml
build.gradle
buildspec.yml
settings.gradle
gradle/
gradlew
gradlew.bat
src/main/
src/test/
test-app/
python-service/
cleanup-*.sh
remove-*.sh
codedeploy-*.sh

# SSH keys
*.pub
*.pem
*.key
id_rsa*

# Terraform working files (but keep the configs)
terraform_output/
terraform/.terraform/
terraform/.terraform.lock.hcl
terraform/terraform.tfstate*
terraform/terraform.tfvars
terraform/*.tfplan

# Keep terraform configs but ignore state and working files
!terraform/*.tf
!terraform/modules/
!terraform/environments/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Additional development artifacts
*.log
*.tmp
*.temp
.pytest_cache/
.mypy_cache/
.coverage
coverage.xml
htmlcov/
bandit-report.json
*.pyc
*.pyo
*.pyd
__pycache__/
*.so
*.egg
*.egg-info/
dist/
build/
.tox/
.nox/
.cache
.hypothesis/

# IDE and editor files
.vscode/
.idea/
*.swp
*.swo
*~
.#*
#*#

# Docker
.dockerignore

# AWS credentials and config
.aws/
aws-credentials.json

# Terraform
*.tfstate
*.tfstate.*
.terraform/
.terraform.lock.hcl
*.tfplan
*.tfplan.*

# Reports and outputs
reports/
internal_reports/
demo_reports/
test_reports/
terraform_output/
*.html
*.json
*.csv
*.xlsx

# Temporary files
*.tmp
*.temp
*.bak
*.backup

# Generated reports
multicloud_billing_report_*.md

# Ansible secrets artifacts
ansible/artifacts/

# Ansible inventory with sensitive data
ansible/inventory/production

# Ansible configuration with sensitive data
ansible/ansible.cfg

# Terraform sensitive files
terraform/*/terraform.tfvars
